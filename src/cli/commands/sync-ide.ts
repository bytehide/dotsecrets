import { Command } from "commander";
import * as fs from "fs";
import * as path from "path";
import { config } from "../../config.js";
import { ConsoleUtils } from "../../utils/console.js";

/**
 * Command for generating TypeScript type definitions for IDE autocompletion
 * 
 * This command scans all available secret sources and generates a TypeScript
 * declaration file (.d.ts) that enables IDE autocompletion for the secrets object.
 * 
 * @example
 * // In CLI
 * $ dotsecrets sync-ide
 * 
 * // In code
 * import { secrets } from "dotsecrets";
 * const apiKey = secrets.API_KEY; // IDE will show all available keys
 */
export const syncIDECommand = new Command("sync-ide")
  .description("Generate TypeScript definitions for IDE autocompletion of secrets")
  .option("--outDir <dir>", "Directory to output type definitions", "types")
  .option("--fileName <name>", "Name of the generated definition file", "dotsecrets.d.ts")
  .option("--verbose", "Show verbose output during generation", false)
  .action(async (options) => {
    try {
      ConsoleUtils.info("Scanning for secrets to generate IDE autocompletion...");
      
      // Use config() to load all secrets from various sources
      const allSecrets = config();
      
      if (!allSecrets || Object.keys(allSecrets).length === 0) {
        ConsoleUtils.warn("No secrets found in .env, .secrets or environment variables.");
        return;
      }
      
      const keys = Object.keys(allSecrets);
      
      if (options.verbose) {
        ConsoleUtils.debug(`Found ${keys.length} secrets to include in IDE autocompletion.`);
        keys.forEach(key => ConsoleUtils.debug(`- ${key}`));
      } else {
        ConsoleUtils.debug(`Found ${keys.length} secrets to include in IDE autocompletion.`);
      }
      
      // Generate TypeScript property declarations for each secret
      const typeLines = keys.map((key) => `  ${key}: SecretValue;`).join("\n");
      
      // Create the complete TypeScript declaration file
      const dts = `// AUTO-GENERATED by dotsecrets sync-ide command - DO NOT EDIT
/**
 * A chainable wrapper for secret values with validation and transformation capabilities
 * 
 * This interface allows both synchronous and asynchronous access to secrets,
 * with chainable validation methods.
 */
export interface SecretValue extends PromiseLike<string> {
  /** 
   * Mark the secret as required (must exist and not be empty) 
   * @example secrets.API_KEY.required()
   */
  required(): this;
  
  /** 
   * Validate the string is not empty 
   * @example secrets.USERNAME.notEmpty()
   */
  notEmpty(): this;
  
  /** 
   * Trim whitespace from both ends of the string 
   * @example secrets.EMAIL.trim()
   */
  trim(): this;
  
  /** 
   * Validate string length is between min and max (inclusive) 
   * @example secrets.PASSWORD.lengthBetween(8, 100)
   */
  lengthBetween(min: number, max: number): this;
  
  /** 
   * Validate the string matches a regular expression 
   * @example secrets.EMAIL.regex(/^[\\w.-]+@[\\w.-]+\\.\\w+$/)
   */
  regex(pattern: RegExp, msg?: string): this;
  
  /** 
   * Convert string to lowercase 
   * @example secrets.USERNAME.toLowerCase()
   */
  toLowerCase(): this;
  
  /** 
   * Convert string to uppercase 
   * @example secrets.COUNTRY_CODE.toUpperCase()
   */
  toUpperCase(): this;
  
  /** 
   * Convert the secret to a number with validation methods 
   * @example secrets.PORT.number().between(1000, 9999)
   */
  number(): NumberSecretValue;
  
  /** 
   * Convert the secret to a boolean with validation methods 
   * @example secrets.FEATURE_ENABLED.boolean().true()
   */
  boolean(): BooleanSecretValue;
  
  /** 
   * Parse the secret as JSON with type safety 
   * @example secrets.CONFIG.json<{host: string, port: number}>()
   */
  json<T>(): JsonSecretValue<T>;
  
  /** String value (requires preload for synchronous access) */
  valueOf(): string;
  
  /** String representation */
  toString(): string;
}

/**
 * A chainable wrapper for numeric secret values
 */
export interface NumberSecretValue extends PromiseLike<number> {
  /** Mark the number as required */
  required(): this;
  
  /** Validate number is >= min */
  min(n: number): this;
  
  /** Validate number is <= max */
  max(n: number): this;
  
  /** Validate number is between min and max (inclusive) */
  between(min: number, max: number): this;
  
  /** Validate number is positive (> 0) */
  positive(): this;
  
  /** Validate number is negative (< 0) */
  negative(): this;
  
  /** Validate number is an integer */
  integer(): this;
  
  /** Number value (requires preload for synchronous access) */
  valueOf(): number;
  
  /** String representation */
  toString(): string;
}

/**
 * A chainable wrapper for boolean secret values
 */
export interface BooleanSecretValue extends PromiseLike<boolean> {
  /** Mark the boolean as required */
  required(): this;
  
  /** Validate boolean is true */
  true(): this;
  
  /** Validate boolean is false */
  false(): this;
  
  /** Boolean value (requires preload for synchronous access) */
  valueOf(): boolean;
  
  /** String representation */
  toString(): string;
}

/**
 * A chainable wrapper for JSON parsed secret values
 */
export interface JsonSecretValue<T> extends PromiseLike<T> {
  /** Mark the JSON value as required */
  required(): this;
  
  /** JSON value (requires preload for synchronous access) */
  valueOf(): T;
  
  /** JSON string representation */
  toString(): string;
}

/**
 * Available secrets in your project
 * Auto-generated from .env, .secrets and PUBLIC_ variables
 */
export interface SecretsMap {
${typeLines}
}

/**
 * Typed access to your application secrets
 * @example
 * // Synchronous (after preload)
 * const apiKey = secrets.API_KEY;
 * 
 * @example
 * // Asynchronous
 * const dbPassword = await secrets.DB_PASSWORD; 
 * 
 * @example
 * // With validation and transformation
 * const port = await secrets.PORT.number().between(1000, 9999);
 */
declare const secrets: SecretsMap;

declare module "dotsecrets" {
  export { SecretValue, NumberSecretValue, BooleanSecretValue, JsonSecretValue };
  export const secrets: SecretsMap;
}

export default secrets;
`;

      // Ensure directory exists
      const typesDir = path.join(process.cwd(), options.outDir);
      fs.mkdirSync(typesDir, { recursive: true });
      
      // Write the declaration file
      const filePath = path.join(typesDir, options.fileName);
      fs.writeFileSync(filePath, dts);
      
      ConsoleUtils.success(`IDE autocompletion synchronized! Generated: ${filePath}`);
      
      // Después de crear el archivo de tipos, crear también un archivo de ejemplo para JavaScript
      const jsDocExample = `// Example usage of DotSecrets with JSDoc for JavaScript IntelliSense
      // Copy this to your JavaScript file or create a global.d.ts file

      /**
       * @typedef {import('${options.outDir}/dotsecrets').SecretsMap} SecretsMap
       */

      /**
       * @type {SecretsMap}
       */
      const secrets = require('dotsecrets').secrets;

      // Now you should have autocompletion:
      // secrets.API_KEY should show intellisense
      `;

      const jsDocPath = path.join(typesDir, "js-example.js");
      fs.writeFileSync(jsDocPath, jsDocExample);

      // Añadir instrucciones para JavaScript
      ConsoleUtils.info(`
      For JavaScript (.js) files:

      1. Option 1 - Add JSDoc comments above your code:

         /**
          * @type {import('${options.outDir}/dotsecrets').SecretsMap}
          */
         const { secrets } = require('dotsecrets');
         
         // Now you'll get autocompletion for:
         // secrets.${keys.length > 0 ? keys[0] : 'API_KEY'}

      2. Option 2 - Enable @ts-check at the top of your JavaScript file:
       
         // @ts-check
         const { secrets } = require('dotsecrets');

      3. Option 3 - For VS Code, create a jsconfig.json in your project root:

         {
           "compilerOptions": {
             "checkJs": true,
             "resolveJsonModule": true,
             "moduleResolution": "node",
             "target": "es2020",
             "module": "commonjs",
             "paths": {
               "dotsecrets": ["./node_modules/dotsecrets", "./${options.outDir}/dotsecrets"]
             }
           },
           "include": ["**/*.js", "./${options.outDir}/**/*.d.ts"]
         }
      `, true);

      // También incluir las instrucciones de tsconfig.json originales
      ConsoleUtils.info(`
      For TypeScript (.ts) files, make sure to include the types in your tsconfig.json:

      {
        "compilerOptions": {
          "typeRoots": ["./node_modules/@types", "${options.outDir}"],
          "paths": {
            "dotsecrets": ["./node_modules/dotsecrets", "./${options.outDir}/dotsecrets"]
          }
        }
      }
      `, true);
      
    } catch (error) {
      ConsoleUtils.error(`Failed to sync IDE autocompletion: ${error}`);
    }
  });