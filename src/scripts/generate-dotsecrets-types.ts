import * as fs from "fs";
import * as path from "path";
import { config } from "../config.js";
import { ConsoleUtils } from "../utils/console.js";

/**
 * Synchronizes IDE autocompletion with detected secrets
 * 
 * Generates TypeScript declaration files based on secrets from:
 * - .env files
 * - .secrets files
 * - PUBLIC_ prefixed variables
 * 
 * @returns {boolean} True if successful, false otherwise
 */
export async function syncIDE(): Promise<boolean> {
  try {
    ConsoleUtils.info("Scanning for secrets to generate IDE autocompletion...");
    
    // Use config() to load all secrets from various sources
    const allSecrets = config();
    
    if (!allSecrets || Object.keys(allSecrets).length === 0) {
      ConsoleUtils.warn("No secrets found in .env, .secrets or environment variables.");
      return false;
    }
    
    const keys = Object.keys(allSecrets);
    ConsoleUtils.debug(`Found ${keys.length} secrets to include in IDE autocompletion.`);
    
    // Generate TypeScript property declarations for each secret
    const typeLines = keys.map((key) => `  ${key}: SecretValue;`).join("\n");
    
    // Create the complete TypeScript declaration file
    const dts = `// AUTO-GENERATED by dotsecrets sync-ide command - DO NOT EDIT
import { SecretValue } from "dotsecrets";

/**
 * Available secrets in your project
 * Auto-generated from .env, .secrets and PUBLIC_ variables
 */
export interface SecretsMap {
${typeLines}
}

/**
 * Typed access to your application secrets
 * @example
 * // Synchronous (after preload)
 * const apiKey = secrets.API_KEY;
 * 
 * @example
 * // Asynchronous
 * const dbPassword = await secrets.DB_PASSWORD; 
 */
declare const secrets: SecretsMap;
export default secrets;
`;

    // Ensure directory exists
    const typesDir = path.join(process.cwd(), "types");
    fs.mkdirSync(typesDir, { recursive: true });
    
    // Write the declaration file
    const filePath = path.join(typesDir, "dotsecrets.d.ts");
    fs.writeFileSync(filePath, dts);
    
    ConsoleUtils.success(`IDE autocompletion synchronized! Generated: ${filePath}`);
    
    // Provide instructions for tsconfig.json
    ConsoleUtils.info(`
Make sure to include the types in your tsconfig.json:

{
  "compilerOptions": {
    "typeRoots": ["./node_modules/@types", "./types"]
  }
}
`);
    
    return true;
  } catch (error) {
    ConsoleUtils.error(`Failed to sync IDE autocompletion: ${error}`);
    return false;
  }
}